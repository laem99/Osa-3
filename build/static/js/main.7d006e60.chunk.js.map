{"version":3,"sources":["components/Persons.js","components/Filter.js","components/AddNew.js","services/persons.js","components/Notification.js","App.js","index.js"],"names":["Persons","persons","remove","map","person","name","number","onClick","Filter","filter","filterChange","value","onChange","AddNew","add","handleNum","handleName","newName","newNum","onSubmit","type","baseUrl","getAll","a","request","axios","get","response","data","create","newObject","post","update","id","put","then","deletePerson","delete","personService","Notification","message","className","App","useState","setPersons","setNewName","setNewNum","setFilter","setMessage","useEffect","initialPersons","PersonsToShow","length","includes","event","target","preventDefault","knownPerson","find","personObj","createdPerson","undefined","window","confirm","returnedPerson","catch","error","p","setTimeout","concat","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7d006e60.chunk.js","sourcesContent":["const Persons = ({ persons, remove }) => {\r\n\r\n    return (\r\n        <ul>\r\n            {persons.map(person => <div key={person.number}>{person.name} {person.number}<button onClick={() => remove({person})}>Delete</button></div>)}\r\n        </ul>\r\n    )\r\n}\r\n\r\nexport default Persons;\r\n","const Filter = ({ filter, filterChange }) => {\r\n    return <div>\r\n        filter shown with <input value={filter} onChange={filterChange} />\r\n    </div>\r\n\r\n}\r\n\r\nexport default Filter;","const AddNew = ({add, handleNum, handleName, newName, newNum }) => {\r\n\r\n    return <form onSubmit={add}>\r\n        <div>\r\n            name: <input value={newName} onChange={handleName} />\r\n        </div>\r\n        <div>\r\n            number: <input value={newNum} onChange={handleNum} />\r\n        </div>\r\n        <div>\r\n            <button type=\"submit\">add</button>\r\n        </div>\r\n    </form>\r\n\r\n}\r\n\r\nexport default AddNew;","import axios from 'axios';\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = async () => {\r\n    const request = axios.get(baseUrl);\r\n    const response = await request\r\n    return response.data\r\n}\r\n\r\nconst create = async newObject => {\r\n    const request = axios.post(baseUrl, newObject);\r\n    const response = await request\r\n    return response.data\r\n}\r\n\r\nconst update = async (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deletePerson = async (id) => {\r\n    axios.delete(`${baseUrl}/${id}`);\r\n}\r\n\r\nconst personService = { getAll, create, update, deletePerson }\r\n\r\nexport default personService;","import '../index.css';\r\n\r\nconst Notification = ({ message }) => {\r\n\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className=\"notification\">\r\n            {message}\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Notification;","import React, { useState, useEffect } from 'react';\nimport Persons from './components/Persons';\nimport Filter from './components/Filter';\nimport AddNew from './components/AddNew';\nimport personService from './services/persons';\nimport Notification from './components/Notification';\n\nconst App = () => {\n  const [persons, setPersons] = useState([]);\n  const [newName, setNewName] = useState('');\n  const [newNum, setNewNum] = useState('');\n  const [filter, setFilter] = useState('');\n  const [message, setMessage] = useState(null);\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons);\n      })\n  }, []);\n\n  const addPerson = (event) => {\n    event.preventDefault();\n    let knownPerson = persons.find(person => person.name === newName);\n    const personObj = {\n      name: newName,\n      number: newNum,\n    };\n    personService\n      .create(personObj)\n      .then(createdPerson => {\n        if (knownPerson !== undefined && knownPerson.number !== newNum) {\n          if (window.confirm(`${knownPerson.name} is already added to phonebook, replace the old number with a new one?`)) {\n            personService\n              .update(knownPerson.id, personObj)\n              .then(returnedPerson => {\n                setPersons(persons.map(person => person.id !== knownPerson.id ? person : returnedPerson))\n              })\n              .catch(error => {\n                setMessage(\n                  `the note '${knownPerson.name}' was already deleted from server`\n                )\n                setPersons(persons.filter(p => p.id !== knownPerson.id))\n              })\n            setTimeout(() => {\n              setMessage(null)\n            }, 5000);\n            setMessage(`${knownPerson.name} number changed`);\n          }\n        }\n        setPersons(persons.concat(createdPerson))\n      })\n      .catch(error => {\n        console.log(error.response.data.message)\n        setMessage(error.response.data.message)\n      })\n    setNewName('');\n    setNewNum('');\n  }\n\n  const handleNameChange = (event) => {\n    setNewName(event.target.value);\n  }\n\n  const handleNumberChange = (event) => {\n    setNewNum(event.target.value);\n  }\n\n  const handleFilterChange = (event) => {\n    setFilter(event.target.value);\n  }\n\n  const removePerson = ({ person }) => {\n    if (window.confirm(`Delete ${person.name} ?`)) {\n      personService\n        .deletePerson(person.id)\n        .then(setPersons(persons.filter(p => p.id !== person.id)))\n        .catch(error => {\n          setMessage(\n            `the note '${person.name}' was already deleted from server`, error\n          )\n        })\n    }\n    setTimeout(() => {\n      setMessage(null)\n    }, 5000);\n    setMessage(`${person.name} deleted`);\n  }\n\n  const PersonsToShow = filter.length === 0\n    ? persons : persons.filter(person => person.name.includes(filter));\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={message} />\n      <Filter value={filter} filterChange={handleFilterChange} />\n      <h3>Add a new</h3>\n      <AddNew newNum={newNum} newName={newName} add={addPerson} handleName={handleNameChange} handleNum={handleNumberChange} />\n      <h3>Numbers</h3>\n      <Persons persons={PersonsToShow} remove={removePerson} />\n    </div>\n  )\n\n}\n\nexport default App","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}